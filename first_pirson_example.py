import numpy as np
# процедурная, у нас объявлена процедурна, для вычисления корреляци
# у нас имеется подпрограмма(процедура pearson_correlation)
# так как функция pearson_correlation является функцией высшего порядка,
# возвращающей значение корреляции Пирсона.

# Функциональное -  также использует функции np.mean,
# sum и np.sqrt для вычисления необходимых промежуточных результатов.

# Структурное - Код разделен на функции, которые выполняют конкретные задачи.
# В данном случае, функция pearson_correlation вычисляет корреляцию Пирсона
# для двух списков x и y.

#  Императивное - Код написан в виде последовательности команд,
#  которые выполняют определенные действия. Программа явно указывает,
#  какие шаги нужно выполнить для вычисления корреляции Пирсона.

def pearson_correlation(x, y):
    # Вычисляем среднее значение для каждого списка
    mean_x = np.mean(x)
    mean_y = np.mean(y)

    # Вычисляем сумму произведений разностей значений списков и их средних значений
    numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))

    # Вычисляем сумму квадратов разностей значений списков и их средних значений
    denominator = np.sqrt(sum((xi - mean_x) ** 2 for xi in x)) * np.sqrt(sum((yi - mean_y) ** 2 for yi in y))

    # Вычисляем корреляцию Пирсона
    correlation = numerator / denominator

    return correlation


x = [1, 4, 6, 5, 7, 8, 10, 12, 1, 15]
y = [9, 8, 4, 5, 4, 7, 8, 19, 12, 10]

correlation = pearson_correlation(x, y)
print("Коэффициент корреляции Пирсона:", correlation)
